{
  "name": "Unichess",
  "tagline": "A general chess API for java",
  "body": "###Detailed information can be found in the [api docs](https://cschlisner.github.io/uniChess/apidocs/index.html)\r\n\r\n<h1>\r\n♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜\r\n♟ ♟ ♟ ♟ ♟ ♟ ♟ ♟\r\n<br>\r\n♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙\r\n♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖\r\n</h1>\r\n***\r\n\r\n#### Starting a Game\r\n\r\n``` Java\r\n// Create two Player Objects.\r\nPlayer<String> p1 = new Player<>(\"player one\", Game.Color.WHITE);\r\nPlayer<String> p2 = new Player<>(\"player two\", Game.Color.BLACK);\r\n\r\n// Create a new Game Object using your players.\r\nGame chessGame = new Game(p1, p2);\r\n```\r\n\r\n#### Advancing a game\r\n\r\nTo advance a game, just call chessGame.advance() with a valid [algebraic notation](https://en.wikipedia.org/wiki/Algebraic_notation_(chess)#Notation_for_moves) string. \r\n\r\n``` Java\r\n\r\nGame.GameEvent gameResponse = chessGame.advance(\"ph4\");\r\n```\r\n\r\nThe game will attempt to make the move 'ph4' for the current player. \r\n\r\nNext we need to check what the game response was:\r\n\r\n``` Java\r\nswitch(gameResponse){\r\n\t\r\n\t// everything went well and the turn has been switched\r\n\tcase OK:\r\n\t\tbreak;\r\n\t\r\n\t// The algebraic notation string needs to be more specific, the turn is the same\r\n\tcase AMBIGUOUS:\r\n\t\tSystem.out.println(\"Ambiguous Move.\");\r\n\t\tbreak;\r\n\t\r\n\t// The input was gibberish, the turn is the same\r\n\tcase INVALID:\r\n\t\tSystem.out.println(\"Invalid Move.\");\r\n\t\tbreak; \r\n\t\r\n\t// The move was valid, but not legal in the current board state\r\n\tcase ILLEGAL:\r\n\t\tSystem.out.println(\"Illegal Move.\");\t\t\t\t\t\r\n\t\tbreak;\r\n\t\r\n\t// The move put the opposing player in check\r\n\tcase CHECK:\r\n\t\tSystem.out.println(\"You are in check!\");\r\n\t\tbreak;\r\n\t\r\n\t// The move put the opposing player in checkmate\r\n\tcase CHECKMATE:\r\n\t\tSystem.out.println(\"Checkmate. \"+chessGame.getDormantPlayer().getID()+\" wins!\");\r\n\t\tSystem.exit(0);\r\n\t\tbreak;\r\n\t\r\n\t// The move put the opposing player in stalemate\r\n\tcase STALEMATE:\r\n\t\tSystem.out.println(\"Stalemate. \"+chessGame.getDormantPlayer().getID()+\" wins!\");\r\n\t\tbreak;\r\n\t\r\n\t// Both Player objects had their draw fields set to true\r\n\tcase DRAW:\r\n\t\tSystem.out.println(\"Draw!\");\r\n\t\tbreak;\r\n\t\t\r\n}\r\n```\r\n#### Printing a game\r\n```Java\r\nchessGame.getCurrentBoard().toString();\r\n```\r\n\r\nWill return a string representation of a board, using the Game setting for unicode chars. \r\n\r\nA sample board state:\r\n```Java\r\n  A  B  C  D  E  F  G  H\r\n8|♜||♞||♝||♛||♚||♝||♞||♜|8\r\n7|♟||♟||♟||♟||♟||♟||♟||♟|7\r\n6| ||·|| ||·|| ||·|| ||·|6\r\n5|·|| ||·|| ||·|| ||·|| |5\r\n4| ||·|| ||·|| ||·|| ||·|4\r\n3|·|| ||·|| ||·|| ||·|| |3\r\n2|♙||♙||♙||♙||♙||♙||♙||♙|2\r\n1|♖||♘||♗||♕||♔||♗||♘||♖|1\r\n  A  B  C  D  E  F  G  H\r\n```\r\n\r\n#### That's it!\r\n\r\nYou only have to write code to respond to those events and feed in moves, uniChess will do the rest. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}